# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SOLVER_PYTHON
else:
    import _SOLVER_PYTHON

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SOLVER_PYTHON.delete_SwigPyIterator

    def value(self):
        return _SOLVER_PYTHON.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SOLVER_PYTHON.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SOLVER_PYTHON.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SOLVER_PYTHON.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SOLVER_PYTHON.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SOLVER_PYTHON.SwigPyIterator_copy(self)

    def next(self):
        return _SOLVER_PYTHON.SwigPyIterator_next(self)

    def __next__(self):
        return _SOLVER_PYTHON.SwigPyIterator___next__(self)

    def previous(self):
        return _SOLVER_PYTHON.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SOLVER_PYTHON.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SOLVER_PYTHON.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SOLVER_PYTHON.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SOLVER_PYTHON.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SOLVER_PYTHON.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SOLVER_PYTHON.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SOLVER_PYTHON.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SOLVER_PYTHON:
_SOLVER_PYTHON.SwigPyIterator_swigregister(SwigPyIterator)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SOLVER_PYTHON.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SOLVER_PYTHON.StringVector___nonzero__(self)

    def __bool__(self):
        return _SOLVER_PYTHON.StringVector___bool__(self)

    def __len__(self):
        return _SOLVER_PYTHON.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SOLVER_PYTHON.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SOLVER_PYTHON.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SOLVER_PYTHON.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SOLVER_PYTHON.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SOLVER_PYTHON.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SOLVER_PYTHON.StringVector___setitem__(self, *args)

    def pop(self):
        return _SOLVER_PYTHON.StringVector_pop(self)

    def append(self, x):
        return _SOLVER_PYTHON.StringVector_append(self, x)

    def empty(self):
        return _SOLVER_PYTHON.StringVector_empty(self)

    def size(self):
        return _SOLVER_PYTHON.StringVector_size(self)

    def swap(self, v):
        return _SOLVER_PYTHON.StringVector_swap(self, v)

    def begin(self):
        return _SOLVER_PYTHON.StringVector_begin(self)

    def end(self):
        return _SOLVER_PYTHON.StringVector_end(self)

    def rbegin(self):
        return _SOLVER_PYTHON.StringVector_rbegin(self)

    def rend(self):
        return _SOLVER_PYTHON.StringVector_rend(self)

    def clear(self):
        return _SOLVER_PYTHON.StringVector_clear(self)

    def get_allocator(self):
        return _SOLVER_PYTHON.StringVector_get_allocator(self)

    def pop_back(self):
        return _SOLVER_PYTHON.StringVector_pop_back(self)

    def erase(self, *args):
        return _SOLVER_PYTHON.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SOLVER_PYTHON.StringVector_swiginit(self, _SOLVER_PYTHON.new_StringVector(*args))

    def push_back(self, x):
        return _SOLVER_PYTHON.StringVector_push_back(self, x)

    def front(self):
        return _SOLVER_PYTHON.StringVector_front(self)

    def back(self):
        return _SOLVER_PYTHON.StringVector_back(self)

    def assign(self, n, x):
        return _SOLVER_PYTHON.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SOLVER_PYTHON.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SOLVER_PYTHON.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SOLVER_PYTHON.StringVector_reserve(self, n)

    def capacity(self):
        return _SOLVER_PYTHON.StringVector_capacity(self)
    __swig_destroy__ = _SOLVER_PYTHON.delete_StringVector

# Register StringVector in _SOLVER_PYTHON:
_SOLVER_PYTHON.StringVector_swigregister(StringVector)
class TokenVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SOLVER_PYTHON.TokenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SOLVER_PYTHON.TokenVector___nonzero__(self)

    def __bool__(self):
        return _SOLVER_PYTHON.TokenVector___bool__(self)

    def __len__(self):
        return _SOLVER_PYTHON.TokenVector___len__(self)

    def __getslice__(self, i, j):
        return _SOLVER_PYTHON.TokenVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SOLVER_PYTHON.TokenVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SOLVER_PYTHON.TokenVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SOLVER_PYTHON.TokenVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SOLVER_PYTHON.TokenVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SOLVER_PYTHON.TokenVector___setitem__(self, *args)

    def pop(self):
        return _SOLVER_PYTHON.TokenVector_pop(self)

    def append(self, x):
        return _SOLVER_PYTHON.TokenVector_append(self, x)

    def empty(self):
        return _SOLVER_PYTHON.TokenVector_empty(self)

    def size(self):
        return _SOLVER_PYTHON.TokenVector_size(self)

    def swap(self, v):
        return _SOLVER_PYTHON.TokenVector_swap(self, v)

    def begin(self):
        return _SOLVER_PYTHON.TokenVector_begin(self)

    def end(self):
        return _SOLVER_PYTHON.TokenVector_end(self)

    def rbegin(self):
        return _SOLVER_PYTHON.TokenVector_rbegin(self)

    def rend(self):
        return _SOLVER_PYTHON.TokenVector_rend(self)

    def clear(self):
        return _SOLVER_PYTHON.TokenVector_clear(self)

    def get_allocator(self):
        return _SOLVER_PYTHON.TokenVector_get_allocator(self)

    def pop_back(self):
        return _SOLVER_PYTHON.TokenVector_pop_back(self)

    def erase(self, *args):
        return _SOLVER_PYTHON.TokenVector_erase(self, *args)

    def __init__(self, *args):
        _SOLVER_PYTHON.TokenVector_swiginit(self, _SOLVER_PYTHON.new_TokenVector(*args))

    def push_back(self, x):
        return _SOLVER_PYTHON.TokenVector_push_back(self, x)

    def front(self):
        return _SOLVER_PYTHON.TokenVector_front(self)

    def back(self):
        return _SOLVER_PYTHON.TokenVector_back(self)

    def assign(self, n, x):
        return _SOLVER_PYTHON.TokenVector_assign(self, n, x)

    def resize(self, *args):
        return _SOLVER_PYTHON.TokenVector_resize(self, *args)

    def insert(self, *args):
        return _SOLVER_PYTHON.TokenVector_insert(self, *args)

    def reserve(self, n):
        return _SOLVER_PYTHON.TokenVector_reserve(self, n)

    def capacity(self):
        return _SOLVER_PYTHON.TokenVector_capacity(self)
    __swig_destroy__ = _SOLVER_PYTHON.delete_TokenVector

# Register TokenVector in _SOLVER_PYTHON:
_SOLVER_PYTHON.TokenVector_swigregister(TokenVector)
class Function(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    args = property(_SOLVER_PYTHON.Function_args_get, _SOLVER_PYTHON.Function_args_set)
    expression = property(_SOLVER_PYTHON.Function_expression_get, _SOLVER_PYTHON.Function_expression_set)

    def __init__(self):
        _SOLVER_PYTHON.Function_swiginit(self, _SOLVER_PYTHON.new_Function())
    __swig_destroy__ = _SOLVER_PYTHON.delete_Function

# Register Function in _SOLVER_PYTHON:
_SOLVER_PYTHON.Function_swigregister(Function)
class Solver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SOLVER_PYTHON.Solver_swiginit(self, _SOLVER_PYTHON.new_Solver())

    def declareVariable(self, name, value, isGlobal=False):
        return _SOLVER_PYTHON.Solver_declareVariable(self, name, value, isGlobal)

    def declareFunction(self, name, args, expression):
        return _SOLVER_PYTHON.Solver_declareFunction(self, name, args, expression)

    def evaluate(self, expression):
        return _SOLVER_PYTHON.Solver_evaluate(self, expression)

    def tokenize(self, equation):
        return _SOLVER_PYTHON.Solver_tokenize(self, equation)

    def parseExpression(self, tokens):
        return _SOLVER_PYTHON.Solver_parseExpression(self, tokens)

    def evaluateNode(self, node):
        return _SOLVER_PYTHON.Solver_evaluateNode(self, node)
    __swig_destroy__ = _SOLVER_PYTHON.delete_Solver

# Register Solver in _SOLVER_PYTHON:
_SOLVER_PYTHON.Solver_swigregister(Solver)
class ExprNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_SOLVER_PYTHON.ExprNode_value_get, _SOLVER_PYTHON.ExprNode_value_set)
    left = property(_SOLVER_PYTHON.ExprNode_left_get, _SOLVER_PYTHON.ExprNode_left_set)
    right = property(_SOLVER_PYTHON.ExprNode_right_get, _SOLVER_PYTHON.ExprNode_right_set)
    arguments = property(_SOLVER_PYTHON.ExprNode_arguments_get, _SOLVER_PYTHON.ExprNode_arguments_set)

    def __init__(self, val):
        _SOLVER_PYTHON.ExprNode_swiginit(self, _SOLVER_PYTHON.new_ExprNode(val))
    __swig_destroy__ = _SOLVER_PYTHON.delete_ExprNode

# Register ExprNode in _SOLVER_PYTHON:
_SOLVER_PYTHON.ExprNode_swigregister(ExprNode)

    # Optional: Add any Python-specific code if necessary


